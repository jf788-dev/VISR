################################################################################
# Telegraf Agent Configuration
################################################################################

[agent]
  interval = "1s"              # How often to gather metrics
  flush_interval = "1s"        # How often to flush data to the output
  round_interval = true        # Align collection intervals to even times (e.g. 00:00, 00:01)
  metric_buffer_limit = 10000  # Max number of metrics to buffer if output is slow/unavailable
  collection_jitter = "0s"     # Optional jitter to avoid measurement spikes
  hostname = "VISR"            # Custom hostname tag for this Telegraf agent

################################################################################
# Input Plugin: MQTT Consumer
################################################################################

[[inputs.mqtt_consumer]]
  servers = ["tcp://mosquitto:1883"]  # Address of the MQTT broker (Docker container hostname)
  username = ""                       # No authentication used (anonymous access)
  password = ""

  topics = ["#"]                      # Subscribe to all MQTT topics
  data_format = "json"               # Expect incoming messages in JSON format
  json_string_fields = ["sensor_id"] # Treats Sensor ID as a field rather than a tag
  tag_keys = ["sensor_id"]

  persistent_session = true          # Maintains subscription state across reconnects
  client_id = "telegraf-VISR-mqtt"   # Unique client ID for this Telegraf MQTT session

################################################################################
# Output Plugin: InfluxDB v2
################################################################################

[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]               # URL of the InfluxDB 2.x endpoint (container hostname)
  token = "visr-token"     # InfluxDB token for authentication
  organization = "VISR"                         # Name of the InfluxDB organization
  bucket = "Data"                               # Bucket to store incoming data